version: 2.1
executors:
  node:
    docker:
      - image: circleci/node:13.8.0
  python:
    docker:
      - image: python:3.9.0-alpine
  aws:
    docker:
      - image: amazon/aws-cli
orbs:
  slack: circleci/slack@4.4.4
commands:
  destroy-environment:
    parameters:
      run_id:
        type: string
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<< parameters.run_id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.run_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.run_id >>
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      run_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          working_directory: ./backend
          command: |
            VALUE=$(curl -H "token: 9a8ffa11-8e4b-4453-a4f0-b83ded8d1f04" --request GET https://api.memstash.io/values/migration_<< parameters.run_id >>)
            echo $VALUE
            if [[ "$VALUE" == "success" ]]
            then
              npm run migrations:revert
            fi
jobs:
  install-backend-dependencies:
    executor: node
    steps:
      - checkout
      - run:
          name: Install backend dependencies
          working_directory: ./backend
          command: |
            npm install
      - persist_to_workspace:
          root: .
          paths: backend/node_modules
  install-frontend-dependencies:
    executor: node
    steps:
      - checkout
      - run:
          name: Install frontend dependencies
          working_directory: ./frontend
          command: |
            npm install
      - persist_to_workspace:
          root: .
          paths: frontend/node_modules
  build-backend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Build backend
          working_directory: ./backend
          command: |
            npm run build
      - persist_to_workspace:
          root: .
          paths: backend/dist
  build-frontend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Build frontend
          working_directory: ./frontend
          command: |
            npm run build
      - persist_to_workspace:
          root: .
          paths: frontend/dist
  test-backend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Test backend
          working_directory: ./backend
          command: |
            npm run test
  test-frontend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Test frontend
          working_directory: ./frontend
          command: |
            npm run test
  scan-backend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Scan backend
          working_directory: ./backend
          command: |
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
  scan-frontend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Scan frontend
          working_directory: ./frontend
          command: |
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
  deploy-infrastructure:
    executor: aws
    steps:
      - checkout
      - run:
          name: Create backend infrastructure
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file backend.yml \
              --stack-name udapeople-backend-${RUN_ID:0:7} \
              --parameter-overrides ID="${RUN_ID:0:7}" \
              --region us-east-1 \
              --tags project=udapeople-backend-${RUN_ID:0:7}
      - run:
          name: Save backend ip and url
          working_directory: ./.circleci/ansible
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:project,Values=udapeople-backend-${RUN_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo [ubuntu]$'\n'$BACKEND_IP > inventory.txt
            echo http://$BACKEND_IP:3030 > backend-url.txt
            cat inventory.txt
            cat backend-url.txt
      - run:
          name: Create frontend infrastructure
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file frontend.yml \
              --stack-name udapeople-frontend-${RUN_ID:0:7} \
              --parameter-overrides ID=${RUN_ID:0:7} \
              --region us-east-1 \
              --tags project=udapeople-frontend-${RUN_ID:0:7}
            echo "created bucket udapeople-${RUN_ID:0:7}"
      - run: yum install -y tar gzip
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
            - .circleci/ansible/backend-url.txt
      - destroy-environment:
          run_id: ${RUN_ID:0:7}
  configure-infrastructure:
    executor: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["8b:57:8d:f1:2d:6e:ba:2b:03:af:57:fa:a4:80:ae:ab"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            ansible --version
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
             ansible-playbook -i inventory.txt configure-server.yml
  run-database-migrations:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run database migrations
          working_directory: ./backend
          command: |
            npm run migrations > migrations_dump.txt
            echo migrations_dump.txt
      - run:
          name: Send migration results to memstash
          working_directory: ./backend
          command: |
            if grep -q "has been executed successfully." migrations_dump.txt
            then
              echo "Database migration was successful for ${RUN_ID:0:7}"
              curl -H "Content-Type: text/plain" -H "token: 9a8ffa11-8e4b-4453-a4f0-b83ded8d1f04" --request PUT --data "success" https://api.memstash.io/values/migration_${RUN_ID:0:7}
            fi
      - destroy-environment:
          run_id: ${RUN_ID:0:7}
  deploy-backend-artifacts:
    executor: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["8b:57:8d:f1:2d:6e:ba:2b:03:af:57:fa:a4:80:ae:ab"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible nodejs npm curl rsync openssh
            ansible --version
            pip install awscli
            aws --version
      - run:
          name: Deploy backend artifact
          working_directory: ./.circleci/ansible
          command: |
             ansible-playbook -i inventory.txt deploy-backend-artifacts.yml
      - destroy-environment:
          run_id: ${RUN_ID:0:7}
      - revert-migrations:
          run_id: ${RUN_ID:0:7}
  deploy-frontend-artifacts:
    executor: python
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update nodejs npm curl
            pip install awscli
            aws --version
      - run:
          name: Get backend url and rebuild the frontend
          command: |
            export API_URL=`cat .circleci/ansible/backend-url.txt`
            echo "${API_URL}"
            npm run build --prefix frontend
      - run:
          name: Deploy frontend artifacts
          command: |
            aws s3 cp frontend/dist s3://udapeople-${RUN_ID:0:7} --recursive
      - destroy-environment:
          run_id: ${RUN_ID:0:7}
      - revert-migrations:
          run_id: ${RUN_ID:0:7}
  smoke-test:
    executor: python
    steps:
      - run:
          name: Install dependencies
          command: |
            apk add --update nodejs npm curl
            pip install awscli
            aws --version
      # - run:
      #     name: Backend smoke test
      #     command: |
      #       export API_URL=`cat .circleci/ansible/backend-url.txt`
      #       echo "${API_URL}"
      #       if curl "${API_URL}/api/status" | grep "ok"
      #       then
      #           return 0
      #       else
      #           return 1
      #       fi
      - run:
          name: Backend smoke test
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:project,Values=udapeople-backend-${RUN_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo http://${BACKEND_IP}:3030/api/status
            if
              curl -s http://${BACKEND_IP}:3030/api/status | grep "ok"
            then
              exit 0
            else
              exit 1
      - run:
          name: Frontend smoke test
          command: |
            URL="http://udapeople-${RUN_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment:
          run_id: ${RUN_ID:0:7}
      - revert-migrations:
          run_id: ${RUN_ID:0:7}

  update-cloudfront-infrastructure:
    executor: python
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update nodejs npm curl
            pip install awscli
            aws --version
      - run:
          name: Update cloudfront distribution
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name udapeople-cloudfront-${RUN_ID:0:7} \
              --parameter-overrides WorkflowID=udapeople-${RUN_ID:0:7} \
              --region us-east-1 \
              --tags project=udapeople-frontend-${RUN_ID:0:7}
      - destroy-environment:
          run_id: ${RUN_ID:0:7}
      - revert-migrations:
          run_id: ${RUN_ID:0:7}

  cleanup:
    executor: aws
    steps:
      - checkout
      - run:
          name: Clean up old infrastructure
          command: |
            WORKFLOW_ID=$(aws cloudformation list-exports \
              --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate \
              --output text)
            echo "WORKFLOW_ID: $WORKFLOW_ID"

            if [[ $WORKFLOW_ID != ${RUN_ID:0:7} ]]
            then
              echo "$WORKFLOW_ID!=${RUN_ID:0:7} => will delete old infrastructure"
              aws s3 rm "s3://udapeople-${WORKFLOW_ID}" --recursive
              aws cloudformation delete-stack \
                --stack-name "udapeople-frontend-${WORKFLOW_ID}"
              aws cloudformation delete-stack \
                --stack-name "udapeople-backend-${WORKFLOW_ID}"
            else
              echo "$WORKFLOW_ID==${RUN_ID:0:7} => nothing needs to be done"
            fi

workflows:
  default:
    jobs:
      - install-backend-dependencies
      - install-frontend-dependencies
      - build-backend:
          requires: [install-backend-dependencies]
      - build-frontend:
          requires: [install-frontend-dependencies]
      - test-backend:
          requires: [build-backend]
      - test-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-database-migrations:
          requires: [configure-infrastructure]
      - deploy-backend-artifacts:
          requires: [run-database-migrations]
      - deploy-frontend-artifacts:
          requires: [run-database-migrations]
      - smoke-test:
          requires: [deploy-backend-artifacts, deploy-frontend-artifacts]
      - update-cloudfront-infrastructure:
          requires: [smoke-test]
      - cleanup:
          requires: [update-cloudfront-infrastructure]